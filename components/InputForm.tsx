
import React, { useState, useRef, useEffect } from 'react';
import type { FormState, RfiItem, Project } from '../types';
import { Mode } from '../types';
import { TRADES, MODES } from '../constants';
import { Spinner } from './common/Spinner';

interface InputFormProps {
  project: Project;
  onSubmit: (formData: FormState) => void;
  isLoading: boolean;
  isProcessingFile: boolean;
  onFileProcess: (file: File) => void;
  onStagedRfisChange: (rfis: RfiItem[]) => void;
  onCommitRfis: () => void;
}

type InputMethod = 'paste' | 'upload';

const RfiReviewSection: React.FC<{
    rfis: RfiItem[];
    onRfisChange: (rfis: RfiItem[]) => void;
    onCommit: () => void;
}> = ({ rfis, onRfisChange, onCommit }) => {
    const [isAdding, setIsAdding] = useState(false);
    const [newRfi, setNewRfi] = useState({ subject: '', question: ''});

    const handleAddManualRfi = (e: React.FormEvent) => {
        e.preventDefault();
        if (newRfi.subject.trim() && newRfi.question.trim()) {
            onRfisChange([...rfis, newRfi]);
            setNewRfi({ subject: '', question: '' });
            setIsAdding(false);
        }
    };

    const handleDeleteRfi = (indexToDelete: number) => {
        onRfisChange(rfis.filter((_, index) => index !== indexToDelete));
    };

    const formControlClass = "w-full px-3 py-2 bg-white border border-border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary transition duration-150 ease-in-out text-text-dark";
    const labelClass = "block text-sm font-medium text-text-muted mb-1";
    
    return (
        <div className="space-y-4">
             <div className="flex justify-between items-center">
                <h2 className="text-xl font-semibold text-text-default">4. RFIs for Review</h2>
                {!isAdding && (
                     <button type="button" onClick={() => setIsAdding(true)} className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md shadow-sm text-black bg-primary-light/80 hover:bg-primary-light focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                           <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        Add RFI Manually
                    </button>
                )}
             </div>

            {isAdding && (
                <form onSubmit={handleAddManualRfi} className="p-4 bg-gray-50 border border-border rounded-lg space-y-3">
                    <h3 className="text-md font-semibold text-text-dark">Add New RFI</h3>
                    <div>
                        <label htmlFor="rfiSubject" className={labelClass}>Subject</label>
                        <input type="text" id="rfiSubject" value={newRfi.subject} onChange={(e) => setNewRfi({...newRfi, subject: e.target.value})} className={formControlClass} placeholder="e.g., Finish spec for L-1 lavatories" required />
                    </div>
                     <div>
                        <label htmlFor="rfiQuestion" className={labelClass}>Question</label>
                        <textarea id="rfiQuestion" value={newRfi.question} onChange={(e) => setNewRfi({...newRfi, question: e.target.value})} className={formControlClass} rows={3} placeholder="Please provide the specification." required />
                    </div>
                    <div className="flex items-center space-x-2">
                         <button type="submit" className="px-4 py-2 text-sm font-semibold bg-primary text-black rounded-lg shadow-sm hover:bg-primary-dark">Save RFI</button>
                         <button type="button" onClick={() => setIsAdding(false)} className="px-4 py-2 text-sm font-semibold bg-gray-200 text-text-muted rounded-lg hover:bg-gray-300">Cancel</button>
                    </div>
                </form>
            )}

            <div className="space-y-3">
                {rfis.length === 0 && !isAdding && (
                    <div className="text-center text-text-muted p-4 border-2 border-dashed border-border rounded-lg">
                        <p>RFIs generated by the AI will appear here for review. You can also add your own manually.</p>
                    </div>
                )}
                {rfis.map((rfi, index) => (
                     <div key={index} className="p-3 bg-primary-light/40 border border-primary/20 rounded-lg flex justify-between items-start gap-4">
                        <div>
                            <h4 className="font-semibold text-text-default">{rfi.subject}</h4>
                            <p className="mt-1 text-sm text-text-muted">{rfi.question}</p>
                        </div>
                        <button type="button" onClick={() => handleDeleteRfi(index)} className="p-1 text-red-500 hover:text-red-700 rounded-full hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-red-500" aria-label="Delete RFI">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                              <path strokeLinecap="round" strokeLinejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                        </button>
                    </div>
                ))}
            </div>
            
            {rfis.length > 0 && (
                 <button 
                    type="button" 
                    onClick={onCommit}
                    className="w-full inline-flex justify-center items-center px-6 py-3 border border-transparent text-base font-medium rounded-lg shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                >
                    Send {rfis.length} {rfis.length === 1 ? 'RFI' : 'RFIs'} to Manager
                </button>
            )}
        </div>
    );
};


export const InputForm: React.FC<InputFormProps> = ({ project, onSubmit, isLoading, isProcessingFile, onFileProcess, onStagedRfisChange, onCommitRfis }) => {
  const [formData, setFormData] = useState<Omit<FormState, 'projectId' | 'projectName' | 'planText'>>({
    mode: Mode.All,
    trade: TRADES[0],
    jurisdiction: '',
    gcQuestions: '',
    knownConstraints: '',
  });
  const [planText, setPlanText] = useState(project.estimator.processedPlanText);
  const [inputMethod, setInputMethod] = useState<InputMethod>('paste');
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    setPlanText(project.estimator.processedPlanText);
    if (project.estimator.processedPlanText) {
      setInputMethod('paste');
    }
  }, [project.estimator.processedPlanText]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!planText) {
      alert("Please provide the plan text to generate documents. You can upload a file to simulate OCR extraction.");
      setInputMethod('paste');
      return;
    }
    onSubmit({
        ...formData,
        projectId: project.id,
        projectName: project.name,
        planText: planText,
    });
  };
  
  const handleFileSelect = (file: File | null) => {
    if (file) {
      if (['application/pdf', 'image/jpeg', 'image/png'].includes(file.type)) {
        setUploadedFile(file);
        onFileProcess(file);
      } else {
        alert('Please upload a valid file type (PDF, JPG, PNG).');
        setUploadedFile(null);
      }
    }
  };
  
  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => { e.preventDefault(); e.stopPropagation(); setIsDragging(true); };
  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => { e.preventDefault(); e.stopPropagation(); setIsDragging(false); };
  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => { e.preventDefault(); e.stopPropagation(); };
  
  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
    const files = e.dataTransfer.files;
    if (files && files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  const formControlClass = "w-full px-3 py-2 bg-white border border-border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary transition duration-150 ease-in-out text-text-dark";
  const labelClass = "block text-sm font-medium text-text-muted mb-1";
  
  const getTabClass = (method: InputMethod) => `w-full px-4 py-2 text-sm font-semibold rounded-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary/50 focus:ring-offset-2 ${inputMethod === method ? 'bg-card shadow-sm text-primary-dark' : 'text-text-muted hover:bg-card/50'}`;

  const isSubmitDisabled = isLoading || isProcessingFile;

  return (
    <div className="bg-card p-6 rounded-xl shadow-sm border border-border">
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <h2 className="text-xl font-semibold text-text-default">1. Project Details</h2>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label htmlFor="projectName" className={labelClass}>Project Name</label>
            <input type="text" id="projectName" name="projectName" value={project.name} className={`${formControlClass} bg-gray-100`} readOnly />
          </div>
          <div>
            <label htmlFor="trade" className={labelClass}>Trade</label>
            <select id="trade" name="trade" value={formData.trade} onChange={handleChange} className={formControlClass}>
              {TRADES.map(trade => <option key={trade} value={trade}>{trade}</option>)}
            </select>
          </div>
          <div>
            <label htmlFor="jurisdiction" className={labelClass}>Jurisdiction (Optional)</label>
            <input type="text" id="jurisdiction" name="jurisdiction" value={formData.jurisdiction} onChange={handleChange} className={formControlClass} placeholder="e.g., Miami-Dade, FL" />
          </div>
          <div>
            <label htmlFor="mode" className={labelClass}>Output Mode</label>
            <select id="mode" name="mode" value={formData.mode} onChange={handleChange} className={formControlClass}>
              {MODES.map(mode => <option key={mode.value} value={mode.value}>{mode.label}</option>)}
            </select>
          </div>
        </div>
        
        <div>
          <h2 className="text-xl font-semibold text-text-default">2. Plan Input</h2>
          <div className="mt-2 mb-4 p-1 bg-gray-100 rounded-lg flex space-x-1">
              <button type="button" onClick={() => setInputMethod('paste')} className={getTabClass('paste')}>Paste Plan Text</button>
              <button type="button" onClick={() => setInputMethod('upload')} className={getTabClass('upload')}>Upload Plan File</button>
          </div>
          
          {inputMethod === 'paste' ? (
              <div>
                  <label htmlFor="planText" className={labelClass}>Plan Text</label>
                  <textarea id="planText" name="planText" value={planText} onChange={(e) => setPlanText(e.target.value)} rows={10} className={formControlClass} placeholder="Paste the merged OCR text and extracted tables from Document AI here..." required />
              </div>
          ) : (
              <div>
                  <input type="file" ref={fileInputRef} onChange={(e) => handleFileSelect(e.target.files ? e.target.files[0] : null)} className="hidden" accept=".pdf,.jpg,.jpeg,.png" />
                  <div 
                    onClick={() => !isProcessingFile && fileInputRef.current?.click()}
                    onDrop={handleDrop} onDragOver={handleDragOver} onDragEnter={handleDragEnter} onDragLeave={handleDragLeave}
                    className={`flex flex-col items-center justify-center p-6 border-2 border-dashed rounded-xl transition-colors ${!isProcessingFile ? 'cursor-pointer' : ''} ${isDragging ? 'border-primary bg-primary/10' : 'border-border hover:border-primary'}`}
                  >
                    {isProcessingFile ? (
                      <div className="text-center"><Spinner /><p className="mt-4 font-medium text-text-default">Processing file...</p><p className="mt-1 text-sm text-text-muted">Simulating Document AI OCR</p></div>
                    ) : uploadedFile ? (
                      <div className="text-center"><svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-12 w-12 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg><p className="mt-2 font-medium text-text-default">{uploadedFile.name}</p><p className="mt-1 text-xs text-text-muted">({(uploadedFile.size / 1024).toFixed(2)} KB)</p><p className="mt-4 text-sm text-blue-700">Click to upload a different file.</p></div>
                    ) : (
                      <div className="text-center text-text-muted"><svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3-3m3-3v12" /></svg><p className="mt-2 font-semibold text-text-default">Click to upload or drag and drop</p><p className="text-xs">PDF, PNG, or JPG</p></div>
                    )}
                  </div>
              </div>
          )}
        </div>

        <div>
          <h2 className="text-xl font-semibold text-text-default">3. Optional Details</h2>
        </div>

        <div>
          <label htmlFor="gcQuestions" className={labelClass}>GC Questions</label>
          <textarea id="gcQuestions" name="gcQuestions" value={formData.gcQuestions} onChange={handleChange} rows={3} className={formControlClass} placeholder="Paste any questions or email from the GC or owner here..." />
        </div>

        <div>
          <label htmlFor="knownConstraints" className={labelClass}>Known Constraints</label>
          <textarea id="knownConstraints" name="knownConstraints" value={formData.knownConstraints} onChange={handleChange} rows={3} className={formControlClass} placeholder="e.g., site conditions, working hours, access limits, staging..." />
        </div>
        
        <button type="submit" disabled={isSubmitDisabled} className="w-full inline-flex justify-center items-center px-6 py-3 border border-transparent text-base font-medium rounded-lg shadow-sm text-black bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors">
          {isLoading ? 'Generating...' : isProcessingFile ? 'Processing...' : 'Generate Documents'}
        </button>
      </form>

      <div className="mt-8 pt-6 border-t border-border">
          <RfiReviewSection 
            rfis={project.estimator.stagedRfis}
            onRfisChange={onStagedRfisChange}
            onCommit={onCommitRfis}
          />
      </div>
    </div>
  );
};
